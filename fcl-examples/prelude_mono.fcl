sig iota : int -> [int]
fun iota (n : int) = generate n (fn x : int => x)

-- sig zipWith : (a -> b -> c) -> [a] -> [b] -> [c]
fun zipWith (f : int -> int -> int) (a1 : [int]) (a2 : [int]) =
  generate (mini (length a1) (length a2))
    (fn ix : int => f (index a1 ix) (index a2 ix))

-- Split an array at a given point
-- sig splitAt : int -> [a] -> ([a], [a])
fun splitAt (n : int) (arr : [int]) =
  (generate n (fn i : int => index arr i),
   generate (subi (length arr) n) (fn x : int => index arr (addi x n)))

-- sig halve : [a] -> ([a], [a])
fun halve (arr : [int]) = splitAt (divi (length arr) 2) arr

-- sig evenOdds : [a] -> ([a], [a])
fun evenOdds (arr : [int]) =
  let n : int  = length arr
  in let n2 : int = divi n 2
     in
     (generate (subi n n2) (fn ix : int => index arr (muli 2 ix)),
      generate n2     (fn ix : int => index arr (addi (muli 2 ix) 1)))

-- sig splitUp : int -> [a] -> [[a]]
fun splitUp (n : int) (arr : [int]) =
  generate (divi (subi (addi (length arr) n) 1) n)
    (fn i : int => generate n
               (fn j : int => index arr (addi (muli i n) j)))

-- sig coalesce : int -> [a] -> [[a]]
fun coalesce (n : int) (arr : [int]) =
  let s : int = divi (length arr) n
  in generate s (fn i : int =>
       generate n (fn j : int => index arr (addi i (muli s j))))

-- sig concat : int -> [[a]] -> [a]
fun concat (n : int) (arr : [[int]]) =
  assemble n (fn x : (int, int) => addi (muli (fst x) n) (snd x)) arr

-- sig seqReduce : (a -> a -> a) -> a -> [a] -> a
fun seqReduce (f : int -> int -> int) (b : int) (array : [int]) =
  let n : int = length array in
  let cond : (int,int) -> bool = fn x : (int,int) => neqi (fst x) n in
  let step : (int,int) -> int  = fn x : (int,int) => (addi (fst x) 1, f (index array (fst x)) (snd x))
  in snd (while cond step (0,b))

-- sig reduce : (a -> a -> a) -> [a] -> [a]
fun reduce (f : int -> int -> int) (arr : [int]) =
  let cond : [int] -> bool = fn arr : [int] => neqi 1 (length arr) in
  let step : [int] -> [int] = fn arr : [int] =>
                            let x : ([int],[int]) = halve arr
                            in zipWith f (fst x) (snd x)
  in concat 1 (map (fn arr : [int] => while cond step (step arr))
                   (splitUp 512 arr))
