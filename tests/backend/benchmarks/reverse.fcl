sig reverse : forall 'a. ['a] -> ['a]
fun reverse arr =
  let n = lengthPull arr
  in generate n (fn i => index arr (n - i - 1))

sig simpleReverse : forall 'a. int -> ['a] -> Program <grid> ['a]<grid>
fun simpleReverse splitSize arr =
  splitUp splitSize arr
   |> mapPull (fn arr2 => return <block> (push <block> (reverse arr2)))
   |> reverse
   |> concat <block> splitSize


sig example : Program <grid> [int]<grid>
val example = simpleReverse 256 (generate (2048 * 2048) (fn i => i))

sig main : Program <grid> unit
val main =
  do <grid>
   { arr <- example
   ; forceAndPrint 10 arr
   ; benchmark 10 (bind <grid> example (force <grid>))
   }
