sig genInput : Program <grid> [int]<grid>
val genInput =
  splitUp 256 (generate (4096 * 4096) (fn i => i))
    |> mapPull (fn arr => return <block> (push <block> arr))
    |> concat <block> 256

sig reverse : forall 'a. ['a] -> ['a]
fun reverse arr =
  let n = lengthPull arr
  in generate n (fn i => index arr (n - i - 1))

sig simpleReverse : forall 'a. int -> ['a] -> Program <grid> ['a]<grid>
fun simpleReverse splitSize arr =
  splitUp splitSize arr
   |> mapPull (fn arr2 => return <block> (push <block> (reverse arr2)))
   |> reverse
   |> concat <block> splitSize


sig main : Program <grid> unit
val main =
 do <grid>
  { input <- (bind <grid> genInput (force <grid>))
  ; arr <- simpleReverse 256 input
  ; forceAndPrint 100 arr
  ; benchmark 100 (bind <grid> (simpleReverse 256 input) (force <grid>))
  }
