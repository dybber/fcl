-- Dot product, sequential
sig dotp : forall 'a 'b 'c 'd. ('a -> 'b -> 'a) -> ('d -> 'c -> 'b) -> 'a -> ['d] -> ['c] -> ['a]<thread>
fun dotp f g neutral vec1 vec2 = foldl f neutral (zipWith g vec1 vec2)

-- Block-wide matrix multiplication
-- multiply m*p matrix by p*n matrix --> result an m*n matrix
sig simpleMatmul : forall 'a 'b 'c 'd. ('d -> 'c -> 'd) -> ('a -> 'b -> 'c) -> 'd -> int -> int -> int -> ['a] -> ['b] -> Program <block> ['d]<block>
fun simpleMatmul f g neutral m p n A B =
  generate (m * n)
    (fn i =>
       let col = i % n in
       let row = divi i n in
       let rowVec = generate p (fn j => index A (row * p + j)) in
       let colVec = generate p (fn j => index B (j * p + col))
       in return<thread> (dotp f g neutral rowVec colVec))
   |> concat<thread> 1

-- Multiplying two rectangular matrices, partitioned in submatrices
sig matmulRect : forall 'a 'b 'c. ('a -> 'a -> 'a) -> ('c -> 'b -> 'a) -> 'a -> [['c]] -> [['b]] -> int -> int -> Program <block> ['a]<block>
fun matmulRect f g neutral rectA rectB splitSize q =
  let tileSize = splitSize*splitSize in
  let init = pushM<block> (generate tileSize (const neutral)) in
  let body = (fn i => fn c =>
                do<block>
                  { subA' <- forcePull<block> (index rectA i)
                  ; subB' <- forcePull<block> (index rectB i)
                  ; res <- simpleMatmul f g neutral splitSize splitSize splitSize subA' subB'
                  ; return<block> (zipWithPush<block> f c res)
                  })
  in liftM<block> push<block> (power<block> q body init)

-- Multiply two matrices in grid-wide computation
sig matmulTiled : forall 'a 'b 'c. ('c -> 'c -> 'c) -> ('a -> 'b -> 'c) -> 'c -> int -> int -> int -> int -> ['a] -> ['b] -> Program <grid> ['c]<grid>
fun matmulTiled f g neutral splitSize hA wA wB A B =
  let tileSize = splitSize * splitSize in
  let p = wA / splitSize in
  let q = wB / splitSize in
  let tiledA = splitGrid splitSize wA hA A in
  let tiledB = splitGrid splitSize wB wA B
  in
     iota (hA*wB / tileSize)
      |> mapPull (fn tile =>
                    let tileRow = tile / q in
                    let tileCol = tile % q in
                    let rectA = generate p (fn i => index tiledA (p * tileRow + i)) in -- (a)
                    let rectB = generate p (fn i => index tiledB (i * q + tileCol))
                    in matmulRect f g neutral rectA rectB splitSize p)
      |> concatGrid<block> splitSize wB

sig main : Program <grid> unit
val main =
  let n = 1600 in
  let p = 800 in
  let m = 800 in
  do<grid>
   { inputA <- generateDoubleVec (n*p)
   ; inputB <- generateDoubleVec (p*m)

   -- test, print 8000 first numbers (as in matmul.expected)
   ; outtiled <- matmulTiled addd muld 0.0 16 n p m inputA inputB
   ; forceAndPrintDouble 8000 outtiled

   -- benchmark
   ; benchmark 100 (forceM<grid> (matmulTiled addd muld 0.0 16 n p m inputA inputB))
   }
