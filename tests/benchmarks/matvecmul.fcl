sig reduceBlock : forall <lvl> 'a. ('a -> 'a -> 'a) -> ['a] -> Program<lvl> ['a]<lvl>
fun reduceBlock<lvl> f arr =
  let cond = fn arr => 1 != lengthPull arr in
  let step = fn arr => let x = halve arr
                       in return<lvl> (push<lvl> (zipWith f (fst x) (snd x)))
  in do<lvl>
      { a <- while<lvl> cond step (step arr)
      ; return<lvl> (push<lvl> a)
      }

sig dotp : [double] -> [double] -> Program<block> [double]<block>
fun dotp vec1 vec2 =
  reduceBlock<block> (fn a => fn b => addd a b)
                     (zipWith (fn a => fn b => muld a b) vec1 vec2)

sig matVecMul : [double] -> [double] -> int -> Program<grid> [double]<grid>
fun matVecMul mat vec cols =
  splitUp cols mat -- split in rows
   |> mapPull (dotp vec)
   |> concat<block> 1 -- concatenate results

sig main : Program<grid> unit
val main =
 let rows = 4096 in
 let cols = 4096
 in
   do<grid>
    { inputMatrix <- generateDoubleVec (rows*cols)
    ; inputVect <- generateDoubleVec cols
    ; arr <- matVecMul inputMatrix inputVect cols
    ; forceAndPrintDouble 4096 arr
    ; benchmark 100 (forceM<grid> (matVecMul inputMatrix inputVect cols))
    }
