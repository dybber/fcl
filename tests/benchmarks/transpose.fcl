sig transpose : forall 'a. int -> int -> ['a] -> ['a]
fun transpose cols rows elems =
  generate (cols * rows)
           (fn n =>
              let i = n / rows in
              let j = n % rows
              in index elems (j * rows + i))

-- Transpose:
--  - split up in tiles
--  - transpose each tile
--  - force each tile to shared memory
--  - transpose outer array
--  - write back to global memory with concatGrid
sig transposeChunked : forall 'a. int -> int -> int -> ['a] -> Program <grid> ['a]<grid>
fun transposeChunked splitSize width height elems =
    splitGrid splitSize width height elems
     |> mapPull pushM<block>
     |> mapPull forceM<block>
     |> mapPull (liftM<block> (transpose splitSize splitSize))
     |> transpose (width / splitSize) (height / splitSize)
     |> mapPull (liftM<block> push<block>)
     |> concatGrid<block> splitSize width

sig transposeChunked16 : forall 'a. int -> int -> ['a] -> Program <grid> ['a]<grid>
val transposeChunked16 = transposeChunked 16

---------------
-- Benchmark --
---------------
sig benchTranspose : forall 'a. ['a] -> Program <grid> ['a]<grid>
fun benchTranspose arr = transposeChunked 16 4096 4096 arr

sig main : Program <grid> unit
val main =
  do <grid>
   { input <- generateIntVec (4096*4096)
   ; arr <- benchTranspose input
   ; forceAndPrint 100 arr
   ; benchmark 100 (forceM<grid> (benchTranspose input))
   }
