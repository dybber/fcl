-- Reduce 2: Assumes commutativity + associativity.
sig reduceBlock : forall <lvl> 'a. ('a -> 'a -> 'a) -> ['a] -> Program<lvl> ['a]<lvl>
fun reduceBlock<lvl> f arr =
  let cond = fn arr => 1 != lengthPull arr in
  let step = fn arr => let x = halve arr
                       in pushM<lvl> (zipWith f (fst x) (snd x))
  in do <lvl>
      { a <- while<lvl> cond step (step arr)
      ; pushM<lvl> a
      }

-- Reduce array partially by one kernel invocation
sig reducePart : forall 'a. ('a -> 'a -> 'a) -> 'a -> ['a] -> Program<grid> ['a]<grid>
fun reducePart f neutralElement arr =
 let workPerBlock = 2 * 256 in
 let paddedArray = pad workPerBlock neutralElement arr     
 in splitUp workPerBlock paddedArray
     |> concatMap<block> 1 (reduceBlock<block> f) 

-- Full reduction
sig reduce : forall 'a. ('a -> 'a -> 'a) -> 'a -> ['a] -> Program <grid> 'a
fun reduce f neutralElement arr =
  do<grid>
   { a <- while<grid>
             (fn arr => 1 != lengthPull arr)
             (reducePart f neutralElement)
             (reducePart f neutralElement arr)
   ; return<grid> (index a 0)
   }

------------------
-- Benchmarking --
------------------
sig benchPartialReduction : [int] -> Program <grid> [int]<grid>
fun benchPartialReduction input = reducePart (fn a => fn b => a + b) 0 input

sig benchFullReduction : [int] -> Program<grid> int
fun benchFullReduction input = reduce (fn a => fn b => a + b) 0 input

sig main : Program<grid> unit
val main =
  do<grid>
   { input <- generateInput (4096*4096)
   ; arr1 <- benchPartialReduction input
   ; forceAndPrint 100 arr1
   ; i <- benchFullReduction input
   ; benchmark 100 (forceM<grid> (benchPartialReduction input))
   ; benchmark 100 (benchFullReduction input)
   }
