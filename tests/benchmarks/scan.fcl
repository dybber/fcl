sig appendPull : forall 'a. ['a] -> ['a] -> ['a]
fun appendPull a1 a2 =
  let n1 = lengthPull a1 in
  let n2 = lengthPull a2
  in generate (n1+n2)
       (fn ix => if lti ix n1
                 then index a1 ix
                 else index a2 (ix - n1))

sig fan : forall 'a. ('a -> 'a -> 'a) -> ['a] -> ['a]
fun fan op arr =
  let x = halve arr in
  let a1 = fst x in
  let a2 = snd x in
  let c = index a1 (lengthPull a1 - 1)
  in appendPull a1 (mapPull (op c) a2)

sig binsplit2 : forall 'a 'b. int -> (['a] -> ['b]) -> int -> ['a] -> Program <block> ['b]<block>
fun binsplit2 n f iteration arr =
  let c  = 1 << (subi n iteration) in -- number of blocks
  let m  = divi (lengthPull arr) c in -- size of each block
  let lt = c * m in -- total size after
  let h  = fn i => i % m in -- global index -> index inside block
  let g  = fn i => fn j => (divi i m) * m -- block-offset from global index
                           + j             -- index inside block
  in return <block> (push <block> (generate lt (fn i => index (f (generate m (fn j => (index arr (g i j))))) (h i))))

-- block-level scan
sig sklansky : forall 'a. int -> ('a -> 'a -> 'a) -> ['a] -> Program <block> ['a]<block>
fun sklansky n op arr =
  do <block>
   { a <- power <block> n (binsplit2 (subi n 1) (fan op)) (return <block> (push <block> arr))
   ; return <block> (push <block> a)
   }

sig scanInChunks : forall 'a. int -> ('a -> 'a -> 'a) -> ['a] -> Program <grid> ['a]<grid>
fun scanInChunks lgChunkSize op arr =
  let chunkSize = 1 << lgChunkSize
  in concatMap <block> chunkSize (sklansky lgChunkSize op) (splitUp chunkSize arr)

sig intermediateSums : forall 'a. int -> ['a] -> ['a]
fun intermediateSums lgChunkSize arr =
  let chunkSize = 1 << lgChunkSize
  in mapPull last (splitUp chunkSize arr)

--sig adjust : forall 'a. int -> ('a -> 'a -> 'a) -> 'a -> ['a] -> ['a] -> Program <grid> ['a]<grid>
fun adjust lgChunkSize f neutral scans sums =
  let n = 1 << lgChunkSize
  in (generate (divi (lengthPull scans) n)
       (fn i => generate n
         (fn j => f (index scans ((i * n) + j))
                    (if i == 0
                     then neutral
                     else index sums (subi i 1)))))
      |> mapPull (fn a => return <block> (push<block> a))
      |> concat <block> n

sig scan : forall 'a. ('a -> 'a -> 'a) -> 'a -> ['a] -> Program <grid> ['a]<grid>
fun scan f neutral input =
 let lgChunkSize = 5
 in do<grid>
     { scans <- forceM<grid> (scanInChunks lgChunkSize f input)
     ; scanSums <- forceM<grid> (scanInChunks 2 f (intermediateSums lgChunkSize scans))
     ; adjust lgChunkSize f neutral scans scanSums
     }

sig main : Program <grid> unit
val main =
  do<grid>
   { input <- generateIntVec (4096*4096)
   ; result <- scan addi 0 input
   ; forceAndPrint 128 result
   ; benchmark 100 (forceM<grid> (scan addi 0 input))
   ; return<grid> ()
   }

-- sig main : Program <grid> [int]
-- val main =
--   do <grid>
--      { scans <- scanInChunks 5 (fn a => fn b => a + b) (generate 128 (fn i => i))
-- --     ; scans' <- forceAndPrint 128 scans
--      ; scans' <- force <grid> scans
               
--      -- Intermediate sums: [496,1520,2544,3568]
--      ; sums <- computeInSingleBlock (intermediateSums 5 scans')
-- --     ; sums' <- forceAndPrint 4 sums
--      ; sums' <- force <grid> sums

--      -- Scan of intermediate sums: [496,2016,4560,8128]
--      ; scanSums <- scanInChunks 2 (fn a => fn b => a + b) (intermediateSums 5 scans')
-- --     ; scanSums' <- forceAndPrint 4 scanSums
--      ; scanSums' <- force <grid> scanSums

--      -- Add intermediate sums
--      ; result <- adjust 5 scans' scanSums'
--      ; result' <- forceAndPrint 128 result
                
--      ; return <grid> scans'
--      -- ; b <- forceAndPrint 128 arr
--      -- ; forceAndPrint 4 (push <grid> (intermediateSums 5 b))
--      }

-- TODO:
------- Fix simplifier/typechecker bug. I guess it's the simplifier that's buggy.
------- (push <grid>, to scan in a single block)
------- or recursion on host?!
