sig id : forall 'a. 'a -> 'a
fun id x = x

sig concat : forall 'a <lvl>. int -> [Program <lvl> ['a]<lvl>] -> Program <1+lvl> ['a]<1+lvl>
fun concat <lvl> n arr =
  interleave <lvl> n (fn sh => ((fst sh) * n) + (snd sh)) arr

sig iota : int -> [int]
fun iota n = generate n (fn x => x)

sig range : int -> int -> [int]
fun range begin end =
  mapPull (fn x => begin + x) (iota (1 + (subi end begin)))

sig zipWith : forall 'a 'b 'c. ('a -> 'b -> 'c) -> ['a] -> ['b] -> ['c]
fun zipWith f a1 a2 =
  generate (mini (lengthPull a1) (lengthPull a2))
    (fn ix => f (index a1 ix) (index a2 ix))

sig backpermute : forall 'a. int -> (int -> (int, int)) -> [['a]] -> ['a]
fun backpermute totalSize f array =
  generate totalSize
    (fn ix => let ix0 = f ix
              in index (index array (fst ix0)) (snd ix0))

-- Split an array at a given point
sig splitAt : forall 'a. int -> ['a] -> (['a], ['a])
fun splitAt n arr =
  (generate n (fn i => index arr i),
   generate (subi (lengthPull arr) n) (fn x => index arr (x + n)))

sig halve : forall 'a. ['a] -> (['a], ['a])
fun halve arr = 
  let half = divi (lengthPull arr) 2
  in splitAt half arr

sig evenOdds : forall 'a. ['a] -> (['a], ['a])
fun evenOdds arr =
  let n  = lengthPull arr
  in let n2 = divi n 2
     in
     (generate (subi n n2) (fn ix => index arr (2 * ix)),
      generate n2     (fn ix => index arr ((2 * ix) + 1)))

sig splitUp : forall 'a. int -> ['a] -> [['a]]
fun splitUp n arr =
  generate (divi (lengthPull arr) n)
    (fn i => generate n
       (fn j => index arr ((i * n) + j)))

sig coalesce : forall 'a. int -> ['a] -> [['a]]
fun coalesce n arr =
  let s = divi (lengthPull arr) n
  in generate s (fn i =>
       generate n (fn j => index arr (i + (s * j))))

sig concatMap : forall 'a 'b <lvl>. int -> ('a -> Program <lvl> ['b]<lvl>) -> ['a] -> Program <1+lvl> ['b]<1+lvl>
fun concatMap <lvl> size f arr = concat <lvl> size (mapPull f arr)

sig take : forall 'a. int -> ['a] -> ['a]
fun take n arr = generate n (fn ix => index arr n)

sig drop : forall 'a. int -> ['a] -> ['a]
fun drop n arr = generate (subi (lengthPull arr) n) (fn i => index arr (i+n))

sig last : forall 'a. ['a] -> 'a
fun last arr = index arr (lengthPull arr - 1)

sig bit : int -> int
fun bit i = 1 << i

sig testBit : int -> int -> bool
fun testBit x i = (x & (bit i)) != 0

sig foldl : forall 'a 'b. ('a -> 'a -> 'a) -> 'a -> ['b] -> ['a]<thread>
fun foldl f b array =
  seqfor 1 (1 + (lengthPull array))
    (fn read => fn i =>
       (0, if i == 0
           then b
           else f (read 0) (index array (subi i 1))))

sig scanl1 : forall 'a. ('a -> 'a -> 'a) -> ['a] -> ['a]<thread>
fun scanl1 op array =
 let n = lengthPull array
 in seqfor n n
      (fn read => fn i =>
          (i, if i == 0
              then index array i
              else op (read (subi i 1)) (index array i)))

sig scanl : forall 'a. ('a -> 'a -> 'a) -> 'a -> ['a] -> ['a]<thread>
fun scanl op b array =
 let n = lengthPull array
 in seqfor (1 + n) (1 + n)
      (fn read => fn i =>
          (i, if i == 0
              then b
              else op (read (subi i 1)) (index array (subi i 1))))

-- Pad array with a neutral element
sig pad : forall 'a. int -> 'a -> ['a] -> ['a]
fun pad divisor neutralElement arr =
  let n = lengthPull arr in
  let extension = subi divisor (n % divisor) in
  let newlength = n + extension
  in generate newlength
       (fn i => if lti i n
                then index arr i
                else neutralElement)

sig computeInSingleBlock : forall 'a. ['a] -> Program <grid> ['a]<grid>
fun computeInSingleBlock arr =
  generate 1 (fn i => arr)
    |> mapPull (fn a => return <block> (push<block> a))
    |> concat <block> (lengthPull arr)
