-- These two are the same except for the types
-- we do not have polymorphism yet
sig reverse : [a] -> [a]
fun reverse arr =
  let n = length arr
  in generate n (fn i => index arr (subi (subi n i) 1))

sig distributeReverse : int -> [a] -> [a]
fun distributeReverse splitSize arr =
  concat splitSize
    (reverse
       (map (fn arr2 => force (reverse arr2))
               (splitUp splitSize arr)))

sig reverseKernel : [int] -> [int]
kernel reverseKernel arr = distributeReverse #localSize arr


-- kernel reverseGrid512 arr = reverseGrid #BlockSize arr
--   config #BlockSize = 512
--   config #WarpSize = 32 -- (or wavefront size)


