sig reverse : [a] -> [a]
fun reverse arr =
  let n = length arr
  in generate n (fn i => index arr (subi (subi n i) 1))

sig distributeReverse : int -> [a] -> [a]
fun distributeReverse splitSize arr =
  splitUp splitSize arr
   |> map (fn arr2 => force (reverse arr2))
   |> reverse
   |> concat splitSize

sig reverseKernel : [int] -> [int]
kernel reverseKernel arr = distributeReverse #localSize arr


