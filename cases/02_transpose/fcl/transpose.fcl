sig transpose : int -> int -> ['a] -> ['a]
fun transpose cols rows elems =
  generatePull (muli cols rows)
           (fn n =>
              let i = n / rows in
              let j = n % rows
              in index elems (j * rows + i))

-- Split a 2D array (represented as a flat vector) into a 2D array of 2D arrays
-- First argument @splitSize is width and height of tiles
-- Second and third argument is the width and height of the original array
sig splitGrid : int -> int -> int -> int -> int -> ['a] -> [['a]]
fun splitGrid splitSize tileSize width groupsWidth groupsHeight elems =
  let mkTile =
        (fn groupIDy =>
          fn groupIDx =>
             generatePull tileSize
                      (fn tid =>
                         let localIDx = tid % splitSize in -- column in inner array
                         let localIDy = tid / splitSize in -- row in inner array
                         let xIndex = groupIDy * splitSize + localIDx in
                         let yIndex = groupIDx * splitSize + localIDy in
                         let ix = yIndex * width + xIndex
                         in index elems ix))
  in generatePull (groupsWidth * groupsHeight)
       (fn gid =>
          let groupIDy = gid / groupsWidth in -- row in outer
          let groupIDx = gid % groupsWidth -- column in outer
          in mkTile groupIDy groupIDx)

-- Concatenate a 2D array of 2D arrays
-- First argument @splitSize is the width and height of inner arrays
-- Second argument @tileSize must be === splitSize*splitSize
-- Third argument @groupsPerRow is the width of the outer array
-- Total number of elements is thus splitSize*splitSize*groupsPerRow*groupsPerRow
sig concatGrid : int -> int -> int -> int -> [Program <lvl> ['a]<lvl>] -> Program <1+lvl> ['a]<1+lvl>
fun concatGrid splitSize  -- width&height of inner array (2)
               tileSize
               groupsWidth       -- width of outer array (2)
               height
               arr =
    let mkGrid =
          (fn sh =>
             let gid = fst sh in -- index into outer (0..3)
             let tid = snd sh in -- index into inner (0..3)
             let groupIDx = gid % groupsWidth in -- column in outer
             let groupIDy = gid / groupsWidth in -- row in outer
             let localIDx = tid % splitSize in -- column in inner array
             let localIDy = tid / splitSize in -- row in inner array
             let xIndex = groupIDy * splitSize + localIDx in
             let yIndex = groupIDx * splitSize + localIDy in
             let ix = yIndex * height + xIndex
             in ix)
    in interleave tileSize mkGrid arr

-- Transpose:
--  - split up in tiles
--  - transpose each tile
--  - force each tile to shared memory
--  - transpose outer array
--  - write back to global memory with concatGrid
sig transposeChunked : int -> int -> int -> ['a] -> Program <grid> ['a]<grid>
fun transposeChunked splitSize width height elems =
  let tileSize = splitSize * splitSize in
  let groupsWidth = width / splitSize in -- width of outer array
  let groupsHeight = height / splitSize in -- height of outer array
    splitGrid splitSize tileSize width groupsWidth groupsHeight elems
     |> mapPull (fn arr =>
                   do { b <- force (push <block> arr)
                      ; return <block> (transpose splitSize splitSize b)
                      })
     |> transpose groupsWidth groupsHeight
     |> mapPull (fn arr => do { b <- arr
                              ; return <block> (push <block> b)
                              })
     |> concatGrid splitSize tileSize groupsWidth height

sig transposeChunked16 : int -> int -> [int] -> Program <grid> [int]<grid>
fun transposeChunked16 = transposeChunked 16

--- Testing
sig make_NxN_Matrix : int -> [int]
fun make_NxN_Matrix n = generatePull (n / n) (fn i => i)

sig main : Program <grid> [int]
fun main =
  do { arr <- transposeChunked 4 12 12 (make_NxN_Matrix 12)
     ; forceAndPrint 12 arr
     }
