sig transpose : int -> int -> [a] -> [a]
fun transpose rows cols elems =
  generate (muli rows cols)
           (fn n =>
              let i = divi n rows in
              let j = modi n rows
              in index elems (addi (muli j rows) i))


-- Split a 2D array (represented as a flat vector) into a 2D array of 2D arrays
-- First argument @splitSize is width and height of tiles
-- Second and third argument is the width and height of the original array
sig splitGrid : int -> int -> int -> [a] -> [[a]]
fun splitGrid splitSize rows cols elems =
  let tileSize = muli splitSize splitSize in
  let n = divi rows splitSize in -- height of outer array
  let m = divi cols splitSize in -- width of outer array
  let mkTile =
        (fn p =>
          fn q =>
             generate tileSize
                      (fn k =>
                         let i = divi k splitSize in -- row in inner array
                         let j = modi k splitSize    -- column in inner array
                         in index elems (addi (muli p (muli m tileSize))
                                              (addi (muli q splitSize)
                                                    (addi (muli m (muli splitSize i))
                                                          j)))))
  in generate (muli n m)
       (fn i =>
          let p = divi i n in -- row in outer
          let q = modi i n -- column in outer
          in mkTile p q)

-- Concatenate a 2D array of 2D arrays
-- First argument @splitSize is the width and height of inner arrays
-- Second argument @cols is the width and height of the outer array
-- Total number of elements is thus splitSize*splitSize*cols*cols
sig concatGrid : int -> int -> [[a]] -> [a]
fun concatGrid splitSize  -- width&height of inner array (2)
               cols       -- width&height of outer array (2)
               arr =
    let tileSize = muli splitSize splitSize in
    let mkGrid =
          (fn x =>
             let p = fst x in -- index into outer (0..3)
             let q = snd x in -- index into inner (0..3)
             let outerRow = divi p cols in
             let outerCol = modi p cols in
             let innerRow = modi q splitSize in
             let innerCol = modi q splitSize
             in addi (muli outerRow (muli cols tileSize))  -- skip complete tiles
                     (addi (muli innerRow (muli cols splitSize)) -- skip complete rows
                           (addi (muli outerCol splitSize)        -- skip to the tile
                                 innerCol)))                    -- skip to row in tile
    in assemble tileSize mkGrid arr

-- Transpose:
--  - split up in tiles
--  - transpose each tile
--  - force each tile to shared memory
--  - transpose outer array
--  - write back to global memory with concatGrid
sig transposeChunked : int -> int -> int -> [int] -> [int]
fun transposeChunked splitSize rows cols elems =
      (concatGrid
        splitSize
        (divi cols splitSize))
        (transpose
           (divi rows splitSize)
           (divi cols splitSize)
           (map (fn arr => force arr)  -- force into shared memory
                (map (transpose splitSize splitSize)
                     (splitGrid splitSize rows cols elems))))



